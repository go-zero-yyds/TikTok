// Code generated by goctl. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	socialFieldNames          = builder.RawFieldNames(&Social{})
	socialRows                = strings.Join(socialFieldNames, ",")
	socialRowsExpectAutoSet   = strings.Join(stringx.Remove(socialFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	socialRowsWithPlaceHolder = strings.Join(stringx.Remove(socialFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	socialModel interface {
		Insert(ctx context.Context, data *Social) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*Social, error)
		Update(ctx context.Context, data *Social) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultSocialModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Social struct {
		UserId         int64  `db:"user_id"`         // 用户ID，由雪花算法生成
		FollowCount    string `db:"follow_count"`    // 关注总数
		FollowerCount  string `db:"follower_count"`  // 粉丝总数粉丝总数粉丝总数
		IsFollow       string `db:"is_follow"`       // 是否关注
		TotalFavorited string `db:"total_favorited"` // 获赞数量
		WorkCount      string `db:"work_count"`      // 作品数
		FavoriteCount  string `db:"favorite_count"`  // 喜欢数
	}
)

func newSocialModel(conn sqlx.SqlConn) *defaultSocialModel {
	return &defaultSocialModel{
		conn:  conn,
		table: "`social`",
	}
}

func (m *defaultSocialModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultSocialModel) FindOne(ctx context.Context, userId int64) (*Social, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", socialRows, m.table)
	var resp Social
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSocialModel) Insert(ctx context.Context, data *Social) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, socialRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FollowCount, data.FollowerCount, data.IsFollow, data.TotalFavorited, data.WorkCount, data.FavoriteCount)
	return ret, err
}

func (m *defaultSocialModel) Update(ctx context.Context, data *Social) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, socialRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FollowCount, data.FollowerCount, data.IsFollow, data.TotalFavorited, data.WorkCount, data.FavoriteCount, data.UserId)
	return err
}

func (m *defaultSocialModel) tableName() string {
	return m.table
}
